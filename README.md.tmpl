# Terraform for <SERVICE_NAME>

This Terraform repo is generated with the [terraform-template](https://github.com/picktrace/terraform-template).

## Development

### Deploy Testing/Development Stack

This repo has a shell script to help running Terraform commands to deploy and update
a Testing/Development stack in the `picktrace-sandbox` GCP project.  Follow these steps
to test `terraform apply`, and clean up after you've finished.


1. Create a `tfvars` file from the local template `tfvars/local.tfvars.local.tmpl`:

        cp tfvars/local.tfvars.local.tmpl tfvars/<YOUR_UNIQUE_WORKSPACE_NAME>.tfvars.local

2. Modify your `tfvars` file accordingly.

3. Initialize you Terraform workspace, use <YOUR_UNIQUE_WORKSPACE_NAME> when prompted
   for workspace:

        ./bin/tf init

4. Plan and apply Terraform:

        ./bin/tf update

After you are done with your own resource stack, remove all resources by:

    ./bin/tf/destroy

### Terraform Lockfile

Starting from version 0.14, Terraform use a lock file to lock down provider versions.
If you upgraded an existing provider, or added a new provider, you need to update
the lockfile and commit the changes to Git.

The lockfile is updated on your local environment whenever you run `./bin/tf init`.
However, because Atlantis is running on a different system arch (Linux),
you need to update the lockfile with provider signatures for `Linux`.  This can be done
with

    ./bin/tf/lock
